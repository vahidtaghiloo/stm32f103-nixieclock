ARM GAS  /tmp/ccTxfzSN.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB69:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "nixie.h"
  27:Src/main.c    **** /* USER CODE END Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN PTD */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* USER CODE END PTD */
  33:Src/main.c    **** 
ARM GAS  /tmp/ccTxfzSN.s 			page 2


  34:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  35:Src/main.c    **** /* USER CODE BEGIN PD */
  36:Src/main.c    **** /* USER CODE END PD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  39:Src/main.c    **** /* USER CODE BEGIN PM */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* USER CODE END PM */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  44:Src/main.c    **** RTC_HandleTypeDef hrtc;
  45:Src/main.c    **** 
  46:Src/main.c    **** SPI_HandleTypeDef hspi1;
  47:Src/main.c    **** 
  48:Src/main.c    **** uint8_t temp = 0;
  49:Src/main.c    **** 
  50:Src/main.c    **** /* USER CODE BEGIN PV */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* USER CODE END PV */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  55:Src/main.c    **** void SystemClock_Config(void);
  56:Src/main.c    **** static void MX_GPIO_Init(void);
  57:Src/main.c    **** static void MX_RTC_Init(void);
  58:Src/main.c    **** static void MX_SPI1_Init(void);
  59:Src/main.c    **** /* USER CODE BEGIN PFP */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* USER CODE END PFP */
  62:Src/main.c    **** 
  63:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  64:Src/main.c    **** /* USER CODE BEGIN 0 */
  65:Src/main.c    **** 
  66:Src/main.c    **** /* USER CODE END 0 */
  67:Src/main.c    **** 
  68:Src/main.c    **** /**
  69:Src/main.c    ****   * @brief  The application entry point.
  70:Src/main.c    ****   * @retval int
  71:Src/main.c    ****   */
  72:Src/main.c    **** int main(void)
  73:Src/main.c    **** {
  74:Src/main.c    ****   /* USER CODE BEGIN 1 */
  75:Src/main.c    **** 
  76:Src/main.c    ****   /* USER CODE END 1 */
  77:Src/main.c    **** 
  78:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  79:Src/main.c    **** 
  80:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  81:Src/main.c    ****   HAL_Init();
  82:Src/main.c    **** 
  83:Src/main.c    ****   /* USER CODE BEGIN Init */
  84:Src/main.c    **** 
  85:Src/main.c    ****   /* USER CODE END Init */
  86:Src/main.c    **** 
  87:Src/main.c    ****   /* Configure the system clock */
  88:Src/main.c    ****   SystemClock_Config();
  89:Src/main.c    **** 
  90:Src/main.c    ****   /* USER CODE BEGIN SysInit */
ARM GAS  /tmp/ccTxfzSN.s 			page 3


  91:Src/main.c    **** 
  92:Src/main.c    ****   /* USER CODE END SysInit */
  93:Src/main.c    **** 
  94:Src/main.c    ****   /* Initialize all configured peripherals */
  95:Src/main.c    ****   MX_GPIO_Init();
  96:Src/main.c    ****   MX_RTC_Init();
  97:Src/main.c    ****   MX_SPI1_Init();
  98:Src/main.c    ****   /* USER CODE BEGIN 2 */
  99:Src/main.c    ****   // RTC_TimeTypeDef gTime;
 100:Src/main.c    ****   // uint8_t seconds;
 101:Src/main.c    ****   // uint8_t tens_seconds;
 102:Src/main.c    ****   // uint8_t minutes;
 103:Src/main.c    ****   // uint8_t tens_minutes;
 104:Src/main.c    ****   // uint8_t hour;
 105:Src/main.c    ****   // uint8_t tens_hour;
 106:Src/main.c    **** 
 107:Src/main.c    ****   // RTC_DateTypeDef gDate;
 108:Src/main.c    ****   // uint8_t day;
 109:Src/main.c    ****   // uint8_t tens_day;
 110:Src/main.c    ****   // uint8_t month;
 111:Src/main.c    ****   // uint8_t tens_month;
 112:Src/main.c    ****   // uint8_t year;
 113:Src/main.c    ****   // uint8_t tens_year;
 114:Src/main.c    ****   /* USER CODE END 2 */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* Infinite loop */
 117:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 118:Src/main.c    ****   while (1)
 119:Src/main.c    ****   {
 120:Src/main.c    ****     Display_AlphaWorldlines();
 121:Src/main.c    ****     // HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 122:Src/main.c    ****     // seconds  = gTime.Seconds % 10;
 123:Src/main.c    ****     // tens_seconds = gTime.Seconds / 10;
 124:Src/main.c    ****     // minutes  = gTime.Minutes % 10;
 125:Src/main.c    ****     // tens_minutes = gTime.Minutes / 10;
 126:Src/main.c    ****     // hour  = gTime.Hours % 10;
 127:Src/main.c    ****     // tens_hour = gTime.Hours / 10;
 128:Src/main.c    **** 
 129:Src/main.c    ****     // HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 130:Src/main.c    ****     // day  = gDate.Date % 10;
 131:Src/main.c    ****     // tens_day = gDate.Date / 10;
 132:Src/main.c    ****     // month  = gDate.Month % 10;
 133:Src/main.c    ****     // tens_month = gDate.Month / 10;
 134:Src/main.c    ****     // year  = gDate.Year % 10;
 135:Src/main.c    ****     // tens_year = gDate.Year / 10;
 136:Src/main.c    **** 
 137:Src/main.c    ****     // if (temp == 0){
 138:Src/main.c    ****     //   Nixie8(seconds);
 139:Src/main.c    ****     //   Nixie7(tens_seconds);
 140:Src/main.c    ****     //   Nixie5(minutes);
 141:Src/main.c    ****     //   Nixie4(tens_minutes);
 142:Src/main.c    ****     //   Nixie2(hour);
 143:Src/main.c    ****     //   Nixie1(tens_hour);
 144:Src/main.c    ****     //   HAL_Delay(1);
 145:Src/main.c    ****     // }
 146:Src/main.c    **** 
 147:Src/main.c    ****     // if (temp == 1){
ARM GAS  /tmp/ccTxfzSN.s 			page 4


 148:Src/main.c    ****     //   Nixie8(day);
 149:Src/main.c    ****     //   Nixie7(tens_day);
 150:Src/main.c    ****     //   Nixie5(month);
 151:Src/main.c    ****     //   Nixie4(tens_month);
 152:Src/main.c    ****     //   Nixie2(year);
 153:Src/main.c    ****     //   Nixie1(tens_year);
 154:Src/main.c    ****     //   HAL_Delay(1);
 155:Src/main.c    ****     // }
 156:Src/main.c    ****     /* USER CODE END WHILE */
 157:Src/main.c    **** 
 158:Src/main.c    ****     /* USER CODE BEGIN 3 */
 159:Src/main.c    ****   }
 160:Src/main.c    ****   /* USER CODE END 3 */
 161:Src/main.c    **** }
 162:Src/main.c    **** 
 163:Src/main.c    **** /**
 164:Src/main.c    ****   * @brief System Clock Configuration
 165:Src/main.c    ****   * @retval None
 166:Src/main.c    ****   */
 167:Src/main.c    **** void SystemClock_Config(void)
 168:Src/main.c    **** {
 169:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 170:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 171:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 172:Src/main.c    **** 
 173:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 174:Src/main.c    ****   */
 175:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 176:Src/main.c    ****   RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 177:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 178:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 179:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 180:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 181:Src/main.c    ****   {
 182:Src/main.c    ****     Error_Handler();
 183:Src/main.c    ****   }
 184:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 185:Src/main.c    ****   */
 186:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 187:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 188:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 189:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 190:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 191:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 192:Src/main.c    **** 
 193:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 194:Src/main.c    ****   {
 195:Src/main.c    ****     Error_Handler();
 196:Src/main.c    ****   }
 197:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 198:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 199:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 200:Src/main.c    ****   {
 201:Src/main.c    ****     Error_Handler();
 202:Src/main.c    ****   }
 203:Src/main.c    **** }
 204:Src/main.c    **** 
ARM GAS  /tmp/ccTxfzSN.s 			page 5


 205:Src/main.c    **** /**
 206:Src/main.c    ****   * @brief RTC Initialization Function
 207:Src/main.c    ****   * @param None
 208:Src/main.c    ****   * @retval None
 209:Src/main.c    ****   */
 210:Src/main.c    **** static void MX_RTC_Init(void)
 211:Src/main.c    **** {
 212:Src/main.c    **** 
 213:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 0 */
 214:Src/main.c    **** 
 215:Src/main.c    ****   /* USER CODE END RTC_Init 0 */
 216:Src/main.c    **** 
 217:Src/main.c    ****   RTC_TimeTypeDef sTime = {0};
 218:Src/main.c    ****   RTC_DateTypeDef DateToUpdate = {0};
 219:Src/main.c    **** 
 220:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 1 */
 221:Src/main.c    **** 
 222:Src/main.c    ****   /* USER CODE END RTC_Init 1 */
 223:Src/main.c    ****   /** Initialize RTC Only 
 224:Src/main.c    ****   */
 225:Src/main.c    ****   hrtc.Instance = RTC;
 226:Src/main.c    ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 227:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 228:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 229:Src/main.c    ****   {
 230:Src/main.c    ****     Error_Handler();
 231:Src/main.c    ****   }
 232:Src/main.c    **** 
 233:Src/main.c    ****   /* USER CODE BEGIN Check_RTC_BKUP */
 234:Src/main.c    ****     
 235:Src/main.c    ****   /* USER CODE END Check_RTC_BKUP */
 236:Src/main.c    **** 
 237:Src/main.c    ****   /** Initialize RTC and set the Time and Date 
 238:Src/main.c    ****   */
 239:Src/main.c    ****   sTime.Hours = 20;
 240:Src/main.c    ****   sTime.Minutes = 0;
 241:Src/main.c    ****   sTime.Seconds = 0;
 242:Src/main.c    **** 
 243:Src/main.c    ****   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 244:Src/main.c    ****   {
 245:Src/main.c    ****     Error_Handler();
 246:Src/main.c    ****   }
 247:Src/main.c    ****   DateToUpdate.WeekDay = RTC_WEEKDAY_FRIDAY;
 248:Src/main.c    ****   DateToUpdate.Month = RTC_MONTH_JULY;
 249:Src/main.c    ****   DateToUpdate.Date = 17;
 250:Src/main.c    ****   DateToUpdate.Year = 20;
 251:Src/main.c    **** 
 252:Src/main.c    ****   if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 253:Src/main.c    ****   {
 254:Src/main.c    ****     Error_Handler();
 255:Src/main.c    ****   }
 256:Src/main.c    ****   /* USER CODE BEGIN RTC_Init 2 */
 257:Src/main.c    **** 
 258:Src/main.c    ****   /* USER CODE END RTC_Init 2 */
 259:Src/main.c    **** 
 260:Src/main.c    **** }
 261:Src/main.c    **** 
ARM GAS  /tmp/ccTxfzSN.s 			page 6


 262:Src/main.c    **** /**
 263:Src/main.c    ****   * @brief SPI1 Initialization Function
 264:Src/main.c    ****   * @param None
 265:Src/main.c    ****   * @retval None
 266:Src/main.c    ****   */
 267:Src/main.c    **** static void MX_SPI1_Init(void)
 268:Src/main.c    **** {
 269:Src/main.c    **** 
 270:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 271:Src/main.c    **** 
 272:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 273:Src/main.c    **** 
 274:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 275:Src/main.c    **** 
 276:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 277:Src/main.c    ****   /* SPI1 parameter configuration*/
 278:Src/main.c    ****   hspi1.Instance = SPI1;
 279:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 280:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 281:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 282:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 283:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 284:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 285:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 286:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 287:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 288:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 289:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 290:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 291:Src/main.c    ****   {
 292:Src/main.c    ****     Error_Handler();
 293:Src/main.c    ****   }
 294:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 295:Src/main.c    **** 
 296:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 297:Src/main.c    **** 
 298:Src/main.c    **** }
 299:Src/main.c    **** 
 300:Src/main.c    **** /**
 301:Src/main.c    ****   * @brief GPIO Initialization Function
 302:Src/main.c    ****   * @param None
 303:Src/main.c    ****   * @retval None
 304:Src/main.c    ****   */
 305:Src/main.c    **** static void MX_GPIO_Init(void)
 306:Src/main.c    **** {
  26              		.loc 1 306 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 30B5     		push	{r4, r5, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 12
  33              		.cfi_offset 4, -12
  34              		.cfi_offset 5, -8
  35              		.cfi_offset 14, -4
  36 0002 87B0     		sub	sp, sp, #28
  37              	.LCFI1:
ARM GAS  /tmp/ccTxfzSN.s 			page 7


  38              		.cfi_def_cfa_offset 40
 307:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  39              		.loc 1 307 3 view .LVU1
  40              		.loc 1 307 20 is_stmt 0 view .LVU2
  41 0004 0024     		movs	r4, #0
  42 0006 0294     		str	r4, [sp, #8]
  43 0008 0394     		str	r4, [sp, #12]
  44 000a 0494     		str	r4, [sp, #16]
  45 000c 0594     		str	r4, [sp, #20]
 308:Src/main.c    **** 
 309:Src/main.c    ****   /* GPIO Ports Clock Enable */
 310:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  46              		.loc 1 310 3 is_stmt 1 view .LVU3
  47              	.LBB2:
  48              		.loc 1 310 3 view .LVU4
  49              		.loc 1 310 3 view .LVU5
  50 000e 1C4B     		ldr	r3, .L3
  51 0010 9A69     		ldr	r2, [r3, #24]
  52 0012 42F01002 		orr	r2, r2, #16
  53 0016 9A61     		str	r2, [r3, #24]
  54              		.loc 1 310 3 view .LVU6
  55 0018 9A69     		ldr	r2, [r3, #24]
  56 001a 02F01002 		and	r2, r2, #16
  57 001e 0092     		str	r2, [sp]
  58              		.loc 1 310 3 view .LVU7
  59 0020 009A     		ldr	r2, [sp]
  60              	.LBE2:
  61              		.loc 1 310 3 view .LVU8
 311:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  62              		.loc 1 311 3 view .LVU9
  63              	.LBB3:
  64              		.loc 1 311 3 view .LVU10
  65              		.loc 1 311 3 view .LVU11
  66 0022 9A69     		ldr	r2, [r3, #24]
  67 0024 42F00402 		orr	r2, r2, #4
  68 0028 9A61     		str	r2, [r3, #24]
  69              		.loc 1 311 3 view .LVU12
  70 002a 9B69     		ldr	r3, [r3, #24]
  71 002c 03F00403 		and	r3, r3, #4
  72 0030 0193     		str	r3, [sp, #4]
  73              		.loc 1 311 3 view .LVU13
  74 0032 019B     		ldr	r3, [sp, #4]
  75              	.LBE3:
  76              		.loc 1 311 3 view .LVU14
 312:Src/main.c    **** 
 313:Src/main.c    ****   /*Configure GPIO pin Output Level */
 314:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
  77              		.loc 1 314 3 view .LVU15
  78 0034 134D     		ldr	r5, .L3+4
  79 0036 2246     		mov	r2, r4
  80 0038 1021     		movs	r1, #16
  81 003a 2846     		mov	r0, r5
  82 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
  83              	.LVL0:
 315:Src/main.c    **** 
 316:Src/main.c    ****   /*Configure GPIO pin : PA4 */
 317:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_4;
ARM GAS  /tmp/ccTxfzSN.s 			page 8


  84              		.loc 1 317 3 view .LVU16
  85              		.loc 1 317 23 is_stmt 0 view .LVU17
  86 0040 1023     		movs	r3, #16
  87 0042 0293     		str	r3, [sp, #8]
 318:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  88              		.loc 1 318 3 is_stmt 1 view .LVU18
  89              		.loc 1 318 24 is_stmt 0 view .LVU19
  90 0044 0123     		movs	r3, #1
  91 0046 0393     		str	r3, [sp, #12]
 319:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  92              		.loc 1 319 3 is_stmt 1 view .LVU20
  93              		.loc 1 319 24 is_stmt 0 view .LVU21
  94 0048 0494     		str	r4, [sp, #16]
 320:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  95              		.loc 1 320 3 is_stmt 1 view .LVU22
  96              		.loc 1 320 25 is_stmt 0 view .LVU23
  97 004a 0223     		movs	r3, #2
  98 004c 0593     		str	r3, [sp, #20]
 321:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  99              		.loc 1 321 3 is_stmt 1 view .LVU24
 100 004e 02A9     		add	r1, sp, #8
 101 0050 2846     		mov	r0, r5
 102 0052 FFF7FEFF 		bl	HAL_GPIO_Init
 103              	.LVL1:
 322:Src/main.c    **** 
 323:Src/main.c    ****   /*Configure GPIO pins : PA11 PA12 */
 324:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 104              		.loc 1 324 3 view .LVU25
 105              		.loc 1 324 23 is_stmt 0 view .LVU26
 106 0056 4FF4C053 		mov	r3, #6144
 107 005a 0293     		str	r3, [sp, #8]
 325:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 108              		.loc 1 325 3 is_stmt 1 view .LVU27
 109              		.loc 1 325 24 is_stmt 0 view .LVU28
 110 005c 0A4B     		ldr	r3, .L3+8
 111 005e 0393     		str	r3, [sp, #12]
 326:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 112              		.loc 1 326 3 is_stmt 1 view .LVU29
 113              		.loc 1 326 24 is_stmt 0 view .LVU30
 114 0060 0494     		str	r4, [sp, #16]
 327:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 115              		.loc 1 327 3 is_stmt 1 view .LVU31
 116 0062 02A9     		add	r1, sp, #8
 117 0064 2846     		mov	r0, r5
 118 0066 FFF7FEFF 		bl	HAL_GPIO_Init
 119              	.LVL2:
 328:Src/main.c    **** 
 329:Src/main.c    ****   /* EXTI interrupt init*/
 330:Src/main.c    ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 120              		.loc 1 330 3 view .LVU32
 121 006a 2246     		mov	r2, r4
 122 006c 2146     		mov	r1, r4
 123 006e 2820     		movs	r0, #40
 124 0070 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 125              	.LVL3:
 331:Src/main.c    ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 126              		.loc 1 331 3 view .LVU33
ARM GAS  /tmp/ccTxfzSN.s 			page 9


 127 0074 2820     		movs	r0, #40
 128 0076 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 129              	.LVL4:
 332:Src/main.c    **** 
 333:Src/main.c    **** }
 130              		.loc 1 333 1 is_stmt 0 view .LVU34
 131 007a 07B0     		add	sp, sp, #28
 132              	.LCFI2:
 133              		.cfi_def_cfa_offset 12
 134              		@ sp needed
 135 007c 30BD     		pop	{r4, r5, pc}
 136              	.L4:
 137 007e 00BF     		.align	2
 138              	.L3:
 139 0080 00100240 		.word	1073876992
 140 0084 00080140 		.word	1073809408
 141 0088 00001110 		.word	269549568
 142              		.cfi_endproc
 143              	.LFE69:
 145              		.section	.text.MX_RTC_Init,"ax",%progbits
 146              		.align	1
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu softvfp
 152              	MX_RTC_Init:
 153              	.LFB67:
 211:Src/main.c    **** 
 154              		.loc 1 211 1 is_stmt 1 view -0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 8
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158 0000 70B5     		push	{r4, r5, r6, lr}
 159              	.LCFI3:
 160              		.cfi_def_cfa_offset 16
 161              		.cfi_offset 4, -16
 162              		.cfi_offset 5, -12
 163              		.cfi_offset 6, -8
 164              		.cfi_offset 14, -4
 165 0002 82B0     		sub	sp, sp, #8
 166              	.LCFI4:
 167              		.cfi_def_cfa_offset 24
 217:Src/main.c    ****   RTC_DateTypeDef DateToUpdate = {0};
 168              		.loc 1 217 3 view .LVU36
 217:Src/main.c    ****   RTC_DateTypeDef DateToUpdate = {0};
 169              		.loc 1 217 19 is_stmt 0 view .LVU37
 170 0004 0024     		movs	r4, #0
 171 0006 ADF80440 		strh	r4, [sp, #4]	@ movhi
 172 000a 8DF80640 		strb	r4, [sp, #6]
 218:Src/main.c    **** 
 173              		.loc 1 218 3 is_stmt 1 view .LVU38
 218:Src/main.c    **** 
 174              		.loc 1 218 19 is_stmt 0 view .LVU39
 175 000e 0094     		str	r4, [sp]
 225:Src/main.c    ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 176              		.loc 1 225 3 is_stmt 1 view .LVU40
 225:Src/main.c    ****   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
ARM GAS  /tmp/ccTxfzSN.s 			page 10


 177              		.loc 1 225 17 is_stmt 0 view .LVU41
 178 0010 144D     		ldr	r5, .L7
 179 0012 154B     		ldr	r3, .L7+4
 180 0014 2B60     		str	r3, [r5]
 226:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 181              		.loc 1 226 3 is_stmt 1 view .LVU42
 226:Src/main.c    ****   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 182              		.loc 1 226 26 is_stmt 0 view .LVU43
 183 0016 4FF0FF33 		mov	r3, #-1
 184 001a 6B60     		str	r3, [r5, #4]
 227:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 185              		.loc 1 227 3 is_stmt 1 view .LVU44
 227:Src/main.c    ****   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 186              		.loc 1 227 20 is_stmt 0 view .LVU45
 187 001c 4FF48073 		mov	r3, #256
 188 0020 AB60     		str	r3, [r5, #8]
 228:Src/main.c    ****   {
 189              		.loc 1 228 3 is_stmt 1 view .LVU46
 228:Src/main.c    ****   {
 190              		.loc 1 228 7 is_stmt 0 view .LVU47
 191 0022 2846     		mov	r0, r5
 192 0024 FFF7FEFF 		bl	HAL_RTC_Init
 193              	.LVL5:
 239:Src/main.c    ****   sTime.Minutes = 0;
 194              		.loc 1 239 3 is_stmt 1 view .LVU48
 239:Src/main.c    ****   sTime.Minutes = 0;
 195              		.loc 1 239 15 is_stmt 0 view .LVU49
 196 0028 1426     		movs	r6, #20
 197 002a 8DF80460 		strb	r6, [sp, #4]
 240:Src/main.c    ****   sTime.Seconds = 0;
 198              		.loc 1 240 3 is_stmt 1 view .LVU50
 240:Src/main.c    ****   sTime.Seconds = 0;
 199              		.loc 1 240 17 is_stmt 0 view .LVU51
 200 002e 8DF80540 		strb	r4, [sp, #5]
 241:Src/main.c    **** 
 201              		.loc 1 241 3 is_stmt 1 view .LVU52
 241:Src/main.c    **** 
 202              		.loc 1 241 17 is_stmt 0 view .LVU53
 203 0032 8DF80640 		strb	r4, [sp, #6]
 243:Src/main.c    ****   {
 204              		.loc 1 243 3 is_stmt 1 view .LVU54
 243:Src/main.c    ****   {
 205              		.loc 1 243 7 is_stmt 0 view .LVU55
 206 0036 2246     		mov	r2, r4
 207 0038 01A9     		add	r1, sp, #4
 208 003a 2846     		mov	r0, r5
 209 003c FFF7FEFF 		bl	HAL_RTC_SetTime
 210              	.LVL6:
 247:Src/main.c    ****   DateToUpdate.Month = RTC_MONTH_JULY;
 211              		.loc 1 247 3 is_stmt 1 view .LVU56
 247:Src/main.c    ****   DateToUpdate.Month = RTC_MONTH_JULY;
 212              		.loc 1 247 24 is_stmt 0 view .LVU57
 213 0040 0523     		movs	r3, #5
 214 0042 8DF80030 		strb	r3, [sp]
 248:Src/main.c    ****   DateToUpdate.Date = 17;
 215              		.loc 1 248 3 is_stmt 1 view .LVU58
 248:Src/main.c    ****   DateToUpdate.Date = 17;
ARM GAS  /tmp/ccTxfzSN.s 			page 11


 216              		.loc 1 248 22 is_stmt 0 view .LVU59
 217 0046 0723     		movs	r3, #7
 218 0048 8DF80130 		strb	r3, [sp, #1]
 249:Src/main.c    ****   DateToUpdate.Year = 20;
 219              		.loc 1 249 3 is_stmt 1 view .LVU60
 249:Src/main.c    ****   DateToUpdate.Year = 20;
 220              		.loc 1 249 21 is_stmt 0 view .LVU61
 221 004c 1123     		movs	r3, #17
 222 004e 8DF80230 		strb	r3, [sp, #2]
 250:Src/main.c    **** 
 223              		.loc 1 250 3 is_stmt 1 view .LVU62
 250:Src/main.c    **** 
 224              		.loc 1 250 21 is_stmt 0 view .LVU63
 225 0052 8DF80360 		strb	r6, [sp, #3]
 252:Src/main.c    ****   {
 226              		.loc 1 252 3 is_stmt 1 view .LVU64
 252:Src/main.c    ****   {
 227              		.loc 1 252 7 is_stmt 0 view .LVU65
 228 0056 2246     		mov	r2, r4
 229 0058 6946     		mov	r1, sp
 230 005a 2846     		mov	r0, r5
 231 005c FFF7FEFF 		bl	HAL_RTC_SetDate
 232              	.LVL7:
 260:Src/main.c    **** 
 233              		.loc 1 260 1 view .LVU66
 234 0060 02B0     		add	sp, sp, #8
 235              	.LCFI5:
 236              		.cfi_def_cfa_offset 16
 237              		@ sp needed
 238 0062 70BD     		pop	{r4, r5, r6, pc}
 239              	.L8:
 240              		.align	2
 241              	.L7:
 242 0064 00000000 		.word	hrtc
 243 0068 00280040 		.word	1073752064
 244              		.cfi_endproc
 245              	.LFE67:
 247              		.section	.text.MX_SPI1_Init,"ax",%progbits
 248              		.align	1
 249              		.syntax unified
 250              		.thumb
 251              		.thumb_func
 252              		.fpu softvfp
 254              	MX_SPI1_Init:
 255              	.LFB68:
 268:Src/main.c    **** 
 256              		.loc 1 268 1 is_stmt 1 view -0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260 0000 08B5     		push	{r3, lr}
 261              	.LCFI6:
 262              		.cfi_def_cfa_offset 8
 263              		.cfi_offset 3, -8
 264              		.cfi_offset 14, -4
 278:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 265              		.loc 1 278 3 view .LVU68
ARM GAS  /tmp/ccTxfzSN.s 			page 12


 278:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 266              		.loc 1 278 18 is_stmt 0 view .LVU69
 267 0002 0C48     		ldr	r0, .L11
 268 0004 0C4B     		ldr	r3, .L11+4
 269 0006 0360     		str	r3, [r0]
 279:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 270              		.loc 1 279 3 is_stmt 1 view .LVU70
 279:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 271              		.loc 1 279 19 is_stmt 0 view .LVU71
 272 0008 4FF48273 		mov	r3, #260
 273 000c 4360     		str	r3, [r0, #4]
 280:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 274              		.loc 1 280 3 is_stmt 1 view .LVU72
 280:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 275              		.loc 1 280 24 is_stmt 0 view .LVU73
 276 000e 4FF40043 		mov	r3, #32768
 277 0012 8360     		str	r3, [r0, #8]
 281:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 278              		.loc 1 281 3 is_stmt 1 view .LVU74
 281:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 279              		.loc 1 281 23 is_stmt 0 view .LVU75
 280 0014 0023     		movs	r3, #0
 281 0016 C360     		str	r3, [r0, #12]
 282:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 282              		.loc 1 282 3 is_stmt 1 view .LVU76
 282:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 283              		.loc 1 282 26 is_stmt 0 view .LVU77
 284 0018 0361     		str	r3, [r0, #16]
 283:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 285              		.loc 1 283 3 is_stmt 1 view .LVU78
 283:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 286              		.loc 1 283 23 is_stmt 0 view .LVU79
 287 001a 4361     		str	r3, [r0, #20]
 284:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 288              		.loc 1 284 3 is_stmt 1 view .LVU80
 284:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 289              		.loc 1 284 18 is_stmt 0 view .LVU81
 290 001c 4FF40072 		mov	r2, #512
 291 0020 8261     		str	r2, [r0, #24]
 285:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 292              		.loc 1 285 3 is_stmt 1 view .LVU82
 285:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 293              		.loc 1 285 32 is_stmt 0 view .LVU83
 294 0022 C361     		str	r3, [r0, #28]
 286:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 295              		.loc 1 286 3 is_stmt 1 view .LVU84
 286:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 296              		.loc 1 286 23 is_stmt 0 view .LVU85
 297 0024 0362     		str	r3, [r0, #32]
 287:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 298              		.loc 1 287 3 is_stmt 1 view .LVU86
 287:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 299              		.loc 1 287 21 is_stmt 0 view .LVU87
 300 0026 4362     		str	r3, [r0, #36]
 288:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
 301              		.loc 1 288 3 is_stmt 1 view .LVU88
 288:Src/main.c    ****   hspi1.Init.CRCPolynomial = 10;
ARM GAS  /tmp/ccTxfzSN.s 			page 13


 302              		.loc 1 288 29 is_stmt 0 view .LVU89
 303 0028 8362     		str	r3, [r0, #40]
 289:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 304              		.loc 1 289 3 is_stmt 1 view .LVU90
 289:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 305              		.loc 1 289 28 is_stmt 0 view .LVU91
 306 002a 0A23     		movs	r3, #10
 307 002c C362     		str	r3, [r0, #44]
 290:Src/main.c    ****   {
 308              		.loc 1 290 3 is_stmt 1 view .LVU92
 290:Src/main.c    ****   {
 309              		.loc 1 290 7 is_stmt 0 view .LVU93
 310 002e FFF7FEFF 		bl	HAL_SPI_Init
 311              	.LVL8:
 298:Src/main.c    **** 
 312              		.loc 1 298 1 view .LVU94
 313 0032 08BD     		pop	{r3, pc}
 314              	.L12:
 315              		.align	2
 316              	.L11:
 317 0034 00000000 		.word	hspi1
 318 0038 00300140 		.word	1073819648
 319              		.cfi_endproc
 320              	.LFE68:
 322              		.section	.text.SystemClock_Config,"ax",%progbits
 323              		.align	1
 324              		.global	SystemClock_Config
 325              		.syntax unified
 326              		.thumb
 327              		.thumb_func
 328              		.fpu softvfp
 330              	SystemClock_Config:
 331              	.LFB66:
 168:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 332              		.loc 1 168 1 is_stmt 1 view -0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 80
 335              		@ frame_needed = 0, uses_anonymous_args = 0
 336 0000 30B5     		push	{r4, r5, lr}
 337              	.LCFI7:
 338              		.cfi_def_cfa_offset 12
 339              		.cfi_offset 4, -12
 340              		.cfi_offset 5, -8
 341              		.cfi_offset 14, -4
 342 0002 95B0     		sub	sp, sp, #84
 343              	.LCFI8:
 344              		.cfi_def_cfa_offset 96
 169:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 345              		.loc 1 169 3 view .LVU96
 169:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 346              		.loc 1 169 22 is_stmt 0 view .LVU97
 347 0004 2422     		movs	r2, #36
 348 0006 0021     		movs	r1, #0
 349 0008 0BA8     		add	r0, sp, #44
 350 000a FFF7FEFF 		bl	memset
 351              	.LVL9:
 170:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
ARM GAS  /tmp/ccTxfzSN.s 			page 14


 352              		.loc 1 170 3 is_stmt 1 view .LVU98
 170:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 353              		.loc 1 170 22 is_stmt 0 view .LVU99
 354 000e 0024     		movs	r4, #0
 355 0010 0594     		str	r4, [sp, #20]
 356 0012 0694     		str	r4, [sp, #24]
 357 0014 0794     		str	r4, [sp, #28]
 358 0016 0894     		str	r4, [sp, #32]
 359 0018 0994     		str	r4, [sp, #36]
 171:Src/main.c    **** 
 360              		.loc 1 171 3 is_stmt 1 view .LVU100
 171:Src/main.c    **** 
 361              		.loc 1 171 28 is_stmt 0 view .LVU101
 362 001a 0194     		str	r4, [sp, #4]
 363 001c 0294     		str	r4, [sp, #8]
 364 001e 0394     		str	r4, [sp, #12]
 365 0020 0494     		str	r4, [sp, #16]
 175:Src/main.c    ****   RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 366              		.loc 1 175 3 is_stmt 1 view .LVU102
 175:Src/main.c    ****   RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 367              		.loc 1 175 36 is_stmt 0 view .LVU103
 368 0022 0623     		movs	r3, #6
 369 0024 0A93     		str	r3, [sp, #40]
 176:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 370              		.loc 1 176 3 is_stmt 1 view .LVU104
 176:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 371              		.loc 1 176 30 is_stmt 0 view .LVU105
 372 0026 0125     		movs	r5, #1
 373 0028 0D95     		str	r5, [sp, #52]
 177:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 374              		.loc 1 177 3 is_stmt 1 view .LVU106
 177:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 375              		.loc 1 177 30 is_stmt 0 view .LVU107
 376 002a 0E95     		str	r5, [sp, #56]
 178:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 377              		.loc 1 178 3 is_stmt 1 view .LVU108
 178:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 378              		.loc 1 178 41 is_stmt 0 view .LVU109
 379 002c 1023     		movs	r3, #16
 380 002e 0F93     		str	r3, [sp, #60]
 179:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 381              		.loc 1 179 3 is_stmt 1 view .LVU110
 180:Src/main.c    ****   {
 382              		.loc 1 180 3 view .LVU111
 180:Src/main.c    ****   {
 383              		.loc 1 180 7 is_stmt 0 view .LVU112
 384 0030 0AA8     		add	r0, sp, #40
 385 0032 FFF7FEFF 		bl	HAL_RCC_OscConfig
 386              	.LVL10:
 186:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 387              		.loc 1 186 3 is_stmt 1 view .LVU113
 186:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 388              		.loc 1 186 31 is_stmt 0 view .LVU114
 389 0036 0F23     		movs	r3, #15
 390 0038 0593     		str	r3, [sp, #20]
 188:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 391              		.loc 1 188 3 is_stmt 1 view .LVU115
ARM GAS  /tmp/ccTxfzSN.s 			page 15


 188:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 392              		.loc 1 188 34 is_stmt 0 view .LVU116
 393 003a 0694     		str	r4, [sp, #24]
 189:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 394              		.loc 1 189 3 is_stmt 1 view .LVU117
 189:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 395              		.loc 1 189 35 is_stmt 0 view .LVU118
 396 003c 0794     		str	r4, [sp, #28]
 190:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 397              		.loc 1 190 3 is_stmt 1 view .LVU119
 190:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 398              		.loc 1 190 36 is_stmt 0 view .LVU120
 399 003e 0894     		str	r4, [sp, #32]
 191:Src/main.c    **** 
 400              		.loc 1 191 3 is_stmt 1 view .LVU121
 191:Src/main.c    **** 
 401              		.loc 1 191 36 is_stmt 0 view .LVU122
 402 0040 0994     		str	r4, [sp, #36]
 193:Src/main.c    ****   {
 403              		.loc 1 193 3 is_stmt 1 view .LVU123
 193:Src/main.c    ****   {
 404              		.loc 1 193 7 is_stmt 0 view .LVU124
 405 0042 2146     		mov	r1, r4
 406 0044 05A8     		add	r0, sp, #20
 407 0046 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 408              	.LVL11:
 197:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 409              		.loc 1 197 3 is_stmt 1 view .LVU125
 197:Src/main.c    ****   PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 410              		.loc 1 197 38 is_stmt 0 view .LVU126
 411 004a 0195     		str	r5, [sp, #4]
 198:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 412              		.loc 1 198 3 is_stmt 1 view .LVU127
 198:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 413              		.loc 1 198 35 is_stmt 0 view .LVU128
 414 004c 4FF48073 		mov	r3, #256
 415 0050 0293     		str	r3, [sp, #8]
 199:Src/main.c    ****   {
 416              		.loc 1 199 3 is_stmt 1 view .LVU129
 199:Src/main.c    ****   {
 417              		.loc 1 199 7 is_stmt 0 view .LVU130
 418 0052 01A8     		add	r0, sp, #4
 419 0054 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 420              	.LVL12:
 203:Src/main.c    **** 
 421              		.loc 1 203 1 view .LVU131
 422 0058 15B0     		add	sp, sp, #84
 423              	.LCFI9:
 424              		.cfi_def_cfa_offset 12
 425              		@ sp needed
 426 005a 30BD     		pop	{r4, r5, pc}
 427              		.cfi_endproc
 428              	.LFE66:
 430              		.section	.text.main,"ax",%progbits
 431              		.align	1
 432              		.global	main
 433              		.syntax unified
ARM GAS  /tmp/ccTxfzSN.s 			page 16


 434              		.thumb
 435              		.thumb_func
 436              		.fpu softvfp
 438              	main:
 439              	.LFB65:
  73:Src/main.c    ****   /* USER CODE BEGIN 1 */
 440              		.loc 1 73 1 is_stmt 1 view -0
 441              		.cfi_startproc
 442              		@ Volatile: function does not return.
 443              		@ args = 0, pretend = 0, frame = 0
 444              		@ frame_needed = 0, uses_anonymous_args = 0
 445 0000 08B5     		push	{r3, lr}
 446              	.LCFI10:
 447              		.cfi_def_cfa_offset 8
 448              		.cfi_offset 3, -8
 449              		.cfi_offset 14, -4
  81:Src/main.c    **** 
 450              		.loc 1 81 3 view .LVU133
 451 0002 FFF7FEFF 		bl	HAL_Init
 452              	.LVL13:
  88:Src/main.c    **** 
 453              		.loc 1 88 3 view .LVU134
 454 0006 FFF7FEFF 		bl	SystemClock_Config
 455              	.LVL14:
  95:Src/main.c    ****   MX_RTC_Init();
 456              		.loc 1 95 3 view .LVU135
 457 000a FFF7FEFF 		bl	MX_GPIO_Init
 458              	.LVL15:
  96:Src/main.c    ****   MX_SPI1_Init();
 459              		.loc 1 96 3 view .LVU136
 460 000e FFF7FEFF 		bl	MX_RTC_Init
 461              	.LVL16:
  97:Src/main.c    ****   /* USER CODE BEGIN 2 */
 462              		.loc 1 97 3 view .LVU137
 463 0012 FFF7FEFF 		bl	MX_SPI1_Init
 464              	.LVL17:
 465              	.L16:
 118:Src/main.c    ****   {
 466              		.loc 1 118 3 discriminator 1 view .LVU138
 120:Src/main.c    ****     // HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 467              		.loc 1 120 5 discriminator 1 view .LVU139
 468 0016 FFF7FEFF 		bl	Display_AlphaWorldlines
 469              	.LVL18:
 118:Src/main.c    ****   {
 470              		.loc 1 118 9 discriminator 1 view .LVU140
 471 001a FCE7     		b	.L16
 472              		.cfi_endproc
 473              	.LFE65:
 475              		.section	.text.Error_Handler,"ax",%progbits
 476              		.align	1
 477              		.global	Error_Handler
 478              		.syntax unified
 479              		.thumb
 480              		.thumb_func
 481              		.fpu softvfp
 483              	Error_Handler:
 484              	.LFB70:
ARM GAS  /tmp/ccTxfzSN.s 			page 17


 334:Src/main.c    **** 
 335:Src/main.c    **** /* USER CODE BEGIN 4 */
 336:Src/main.c    **** 
 337:Src/main.c    **** /* USER CODE END 4 */
 338:Src/main.c    **** 
 339:Src/main.c    **** /**
 340:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 341:Src/main.c    ****   * @retval None
 342:Src/main.c    ****   */
 343:Src/main.c    **** void Error_Handler(void)
 344:Src/main.c    **** {
 485              		.loc 1 344 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489              		@ link register save eliminated.
 345:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 346:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 347:Src/main.c    **** 
 348:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 349:Src/main.c    **** }
 490              		.loc 1 349 1 view .LVU142
 491 0000 7047     		bx	lr
 492              		.cfi_endproc
 493              	.LFE70:
 495              		.global	temp
 496              		.comm	hspi1,88,4
 497              		.comm	hrtc,20,4
 498              		.section	.bss.temp,"aw",%nobits
 501              	temp:
 502 0000 00       		.space	1
 503              		.text
 504              	.Letext0:
 505              		.file 2 "/home/vahid/ARM-Toolchain/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine
 506              		.file 3 "/home/vahid/ARM-Toolchain/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_st
 507              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 508              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 509              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 510              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 511              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 512              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 513              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 514              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 515              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rtc.h"
 516              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 517              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 518              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 519              		.file 16 "Inc/nixie.h"
 520              		.file 17 "<built-in>"
ARM GAS  /tmp/ccTxfzSN.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccTxfzSN.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccTxfzSN.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccTxfzSN.s:139    .text.MX_GPIO_Init:0000000000000080 $d
     /tmp/ccTxfzSN.s:146    .text.MX_RTC_Init:0000000000000000 $t
     /tmp/ccTxfzSN.s:152    .text.MX_RTC_Init:0000000000000000 MX_RTC_Init
     /tmp/ccTxfzSN.s:242    .text.MX_RTC_Init:0000000000000064 $d
                            *COM*:0000000000000014 hrtc
     /tmp/ccTxfzSN.s:248    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccTxfzSN.s:254    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccTxfzSN.s:317    .text.MX_SPI1_Init:0000000000000034 $d
                            *COM*:0000000000000058 hspi1
     /tmp/ccTxfzSN.s:323    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccTxfzSN.s:330    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccTxfzSN.s:431    .text.main:0000000000000000 $t
     /tmp/ccTxfzSN.s:438    .text.main:0000000000000000 main
     /tmp/ccTxfzSN.s:476    .text.Error_Handler:0000000000000000 $t
     /tmp/ccTxfzSN.s:483    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccTxfzSN.s:501    .bss.temp:0000000000000000 temp
     /tmp/ccTxfzSN.s:502    .bss.temp:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_RTC_Init
HAL_RTC_SetTime
HAL_RTC_SetDate
HAL_SPI_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
Display_AlphaWorldlines
